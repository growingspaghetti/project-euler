use core::panic;

// Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

// 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

// It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

// Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?

fn is_pentagonal(n: u64) -> bool {
    let expr = 24 * n + 1;
    let sqrt = (expr as f64).sqrt() as u64;
    if expr != sqrt * sqrt {
        return false;
    }
    sqrt % 6 == 5
}

fn pentagon(n: u64) -> u64 {
    n * (3 * n - 1) / 2
}

fn calc_distance(pentagonals: &mut Vec<u64>) -> (u64, u64) {
    for n in 1u64.. {
        let p1 = pentagon(n);
        for &p2 in pentagonals.iter().rev() {
            let d = p1 - p2;
            let s = p1 + p2;
            if is_pentagonal(d) && is_pentagonal(s) {
                return (d, n);
            }
        }
        pentagonals.push(p1);
    }
    panic!("This method is supposed to have return but not break in the outermost loop!");
}

fn is_answer_confirmed(pentagonals: &mut Vec<u64>, distance: u64, n: u64) -> bool {
    pentagonals.push(pentagon(n));
    for n in n + 1.. {
        let p1 = pentagon(n);
        if 3 * (n - 1) + 1 > distance {
            return true;
        }
        for &p2 in pentagonals.iter().rev() {
            let d = p1 - p2;
            if d >= distance {
                break;
            }
            let s = p1 + p2;
            if is_pentagonal(d) && is_pentagonal(s) {
                return false;
            }
        }
        pentagonals.push(p1);
    }
    panic!("This method is supposed to have return but not break in the outermost loop!");
}

// 109 ms with confirmation code
// 15 ms
/// ```rust
/// use self::project_euler::m44::sum_and_difference_are_pentagonal;
/// assert_eq!(sum_and_difference_are_pentagonal(), 5482660);
/// ```
pub fn sum_and_difference_are_pentagonal() -> u64 {
    let mut pentagonals = vec![];
    let (d, n) = calc_distance(&mut pentagonals);
    //assert!(is_answer_confirmed(&mut pentagonals, d, n));
    d
}
